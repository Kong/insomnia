name: Release Build

on:
  workflow_dispatch:
    inputs:
      channel:
        required: true
        type: choice
        description: Channel of the release (alpha/beta/stable)
        options:
        - alpha
        - beta
        - stable
      version:
        required: true
        description: version of the release (e.g. 2022.1.0)
      iteration:
        required: false
        description: iteration of the release, used for non-stable releases (version-channel.iteration) (e.g. 0, 1, 2, 3 ...)
        default: '0'

env:
  RELEASE_VERSION: ${{ github.event.inputs.version }}${{ github.event.inputs.channel != 'stable' && format('-{0}.{1}', github.event.inputs.channel, github.event.inputs.iteration) || '' }}
  RELEASE_BRANCH: release/${{ github.event.inputs.version }}${{ github.event.inputs.channel != 'stable' && format('-{0}.{1}', github.event.inputs.channel, github.event.inputs.iteration) || '' }}

jobs:
  setup-release-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Create Branch # Create a branch if it doesn't exist
        uses: peterjgrainger/action-create-branch@v2.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          branch: ${{ env.RELEASE_BRANCH }}

      - name: Checkout branch # Check out the new branch
        uses: actions/checkout@v2
        with:
          ref: ${{ env.RELEASE_BRANCH }}

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version-file: '.nvmrc'

      - name: Configure Git user
        id: configure_git_user
        uses: Homebrew/actions/git-user-config@master
        with:
          username: ${{ (github.event_name == 'workflow_dispatch' && github.actor) || 'insomnia-infra' }}

      - name: Run bootstrap
        run: npm run bootstrap

      - name: Lerna version (alpha/beta)
        if: github.event.inputs.channel != 'stable'
        run: npm run version -- --preid "${{ github.event.inputs.channel}}" prepatch --yes --no-push

      - name: Lerna version (stable)
        if: github.event.inputs.channel == 'stable'
        run: npm run version -- patch --yes --no-push

      - name: Config version
        run: APP_VERSION="${{ env.RELEASE_VERSION }}" npm run app-bump-version

      - name: Commit & Push changes
        uses: actions-js/push@master
        with:
          branch: ${{ env.RELEASE_BRANCH }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          message: "Bump app config version"
          tags: true
          author_name: ${{ steps.configure_git_user.outputs.name }}
          author_email: ${{ steps.configure_git_user.outputs.email }}

  build-and-upload-artifacts:
    needs: setup-release-branch
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            csc_link_secret: DESIGNER_MAC_CSC_LINK
            csc_key_password_secret: DESIGNER_MAC_CSC_KEY_PASSWORD
          - os: windows-latest
            csc_link_secret: DESIGNER_WINDOWS_CSC_LINK
            csc_key_password_secret: DESIGNER_WINDOWS_CSC_KEY_PASSWORD
          - os: ubuntu-latest
            csc_link_secret: ''
            csc_key_password_secret: ''
    env:
      NPM_CONFIG_TARGET: 12.2.3
      NPM_CONFIG_DISTURL: https://electronjs.org/headers
      NPM_CONFIG_RUNTIME: electron
    steps:
      - name: Checkout branch
        uses: actions/checkout@v2
        with:
          ref: ${{ env.RELEASE_BRANCH }}

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version-file: '.nvmrc'

      - name: Bootstrap packages
        run: npm run bootstrap

      - name: Package app
        shell: bash
        run: npm run app-package
        env:
          APPLE_ID: ${{ matrix.os == 'macos-latest' && secrets.DESIGNER_APPLE_ID || '' }}
          APPLE_ID_PASSWORD: ${{ matrix.os == 'macos-latest' && secrets.DESIGNER_APPLE_ID_PASSWORD || '' }}
          CSC_LINK: ${{ matrix.csc_link_secret != '' && secrets[matrix.csc_link_secret] || '' }}
          CSC_KEY_PASSWORD: ${{ matrix.csc_key_password_secret != '' && secrets[matrix.csc_key_password_secret] || ''  }}

      - name: Package inso
        run: npm run inso-package

      # TODO: Code-signing for inso

      - name: Create inso artifacts
        run: npm run inso-package:artifacts

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          if-no-files-found: ignore
          name: ${{ matrix.os }}-artifacts
          path: |
            packages/insomnia-app/dist/*.exe
            packages/insomnia-app/dist/squirrel-windows/*
            packages/insomnia-app/dist/*.zip
            packages/insomnia-app/dist/*.dmg
            packages/insomnia-app/dist/*.snap
            packages/insomnia-app/dist/*.rpm
            packages/insomnia-app/dist/*.deb
            packages/insomnia-app/dist/*.AppImage
            packages/insomnia-app/dist/*.tar.gz
            packages/insomnia-inso/artifacts/*

  create-pull-request:
    needs: build-and-upload-artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch # Check out the new branch
        uses: actions/checkout@v2
        with:
          ref: ${{ env.RELEASE_BRANCH }}
          fetch-depth: 0

      - name: Run the Action
        uses: devops-infra/action-pull-request@v0.4.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          source_branch: ${{ env.RELEASE_BRANCH}}
          target_branch: develop
          title: ":rocket: ${{ env.RELEASE_VERSION}}"
          body: |
            **Automated pull request**

            Download release artifacts [here](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          draft: true
          ignore_users: "dependabot"
